//created on: Oct 24, 2022
package com.pieceMoves

//list any import classes here.
import com.sbnz.chessanalyzer.model.piece.Piece;
import com.sbnz.chessanalyzer.model.piece.Knight;
import com.sbnz.chessanalyzer.model.piece.Bishop;
import com.sbnz.chessanalyzer.model.Square;
import com.sbnz.chessanalyzer.model.CanMoveOn;
import com.sbnz.chessanalyzer.model.Board;
//declare any global variables here


rule "Knight Moves UP RIGHT"

    when
        $s : Square($piece : piece, $squareText : squareText, $startRank : rank, $startFile : file, $boardNumS : boardNum) 
		$k : Knight(this.equals($piece))
		$moveSquare : Square(rank == $startRank + 2, file == $startFile + 1,  $squareText2 : squareText, boardNum == $boardNumS)
    then
    	//System.out.println(" Square: " + $squareText + " on boar: " + $boardNumS);
        insertLogical(new CanMoveOn($k, $moveSquare));

end

rule "Knight Moves UP LEFT"

    when
        $s : Square($piece : piece, $squareText : squareText, $startRank : rank, $startFile : file, $boardNumS : boardNum) 
		$k : Knight(this.equals($piece))
		$moveSquare : Square(rank == $startRank + 2, file == $startFile - 1,  $squareText2 : squareText, boardNum == $boardNumS)
    then
    	System.out.println(" Square: " + $squareText + " on boar: " + $boardNumS);
        insertLogical(new CanMoveOn($k, $moveSquare));

end


rule "Knight Moves LEFT UP"

    when
        $s : Square($piece : piece, $squareText : squareText, $startRank : rank, $startFile : file, $boardNumS : boardNum) 
		$k : Knight(this.equals($piece))
		$moveSquare : Square(rank == $startRank + 1, file == $startFile - 2,  $squareText2 : squareText, boardNum == $boardNumS)
    then
    	//System.out.println(" Square: " + $squareText + " on boar: " + $boardNumS);
        insertLogical(new CanMoveOn($k, $moveSquare));

end

rule "Knight Moves LEFT DOWN"

    when
        $s : Square($piece : piece, $squareText : squareText, $startRank : rank, $startFile : file, $boardNumS : boardNum) 
		$k : Knight(this.equals($piece))
		$moveSquare : Square(rank == $startRank - 1, file == $startFile - 2,  $squareText2 : squareText, boardNum == $boardNumS)
    then
    	//System.out.println(" Square: " + $squareText + " on boar: " + $boardNumS);
        insertLogical(new CanMoveOn($k, $moveSquare));

end


rule "Knight Moves RIGHT UP"

    when
        $s : Square($piece : piece, $squareText : squareText, $startRank : rank, $startFile : file, $boardNumS : boardNum) 
		$k : Knight(this.equals($piece))
		$moveSquare : Square(rank == $startRank + 1, file == $startFile + 2,  $squareText2 : squareText, boardNum == $boardNumS)
    then
    	//System.out.println(" Square: " + $squareText + " on boar: " + $boardNumS);
        insertLogical(new CanMoveOn($k, $moveSquare));

end

rule "Knight Moves RIGHT DOWN"

    when
        $s : Square($piece : piece, $squareText : squareText, $startRank : rank, $startFile : file, $boardNumS : boardNum) 
		$k : Knight(this.equals($piece))
		$moveSquare : Square(rank == $startRank - 1, file == $startFile + 2,  $squareText2 : squareText, boardNum == $boardNumS)
    then
    	//System.out.println(" Square: " + $squareText + " on boar: " + $boardNumS);
        insertLogical(new CanMoveOn($k, $moveSquare));

end


rule "Knight Moves DOWN LEFT"

    when
        $s : Square($piece : piece, $squareText : squareText, $startRank : rank, $startFile : file, $boardNumS : boardNum) 
		$k : Knight(this.equals($piece))
		$moveSquare : Square(rank == $startRank - 2, file == $startFile - 1,  $squareText2 : squareText, boardNum == $boardNumS)
    then
    	//System.out.println(" Square: " + $squareText + " on boar: " + $boardNumS);
        insertLogical(new CanMoveOn($k, $moveSquare));

end

rule "Knight Moves DOWN RIGHT"

    when
        $s : Square($piece : piece, $squareText : squareText, $startRank : rank, $startFile : file, $boardNumS : boardNum) 
		$k : Knight(this.equals($piece))
		$moveSquare : Square(rank == $startRank - 2, file == $startFile + 1,  $squareText2 : squareText, boardNum == $boardNumS)
    then
    	//System.out.println(" Square: " + $squareText + " on boar: " + $boardNumS);
        insertLogical(new CanMoveOn($k, $moveSquare));

end


/*
rule "Print Can Move On"
  when
  		$moveSquare : Square($squareTextMove : squareText, $boardNumS : boardNum) 
  		$startSquare : Square($piece : piece,$squareTextStart : squareText, boardNum == $boardNumS)
		$p : Piece(this.equals($piece))
		
        CanMoveOn($p, $moveSquare;)
    then
    	//System.out.println("Piece: " + $p + " Can Move On " + $squareTextMove +" on boar: " + $boardNumS);
      System.out.println("Piece: " + $p + " Can Move From " + $squareTextStart + " To " + $squareTextMove + " on boar: " + $boardNumS);

end

*/







rule "LAST"
salience -100
  when
  	
    then
        System.out.println("DONE");

end


