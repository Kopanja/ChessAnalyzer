//created on: Mar 16, 2023
package rules.tactics

//list any import classes here.
import com.sbnz.chessanalyzer.model.IsAttacking;
import com.sbnz.chessanalyzer.model.IsDefending;
import com.sbnz.chessanalyzer.model.IsChecking;
import com.sbnz.chessanalyzer.model.piece.King;
import com.sbnz.chessanalyzer.model.piece.Piece;
import com.sbnz.chessanalyzer.model.CanCapture;
import java.util.List;
//declare any global variables here




rule "Is Checking"
salience -99
    when
        $p : Piece()
        $k : King()
        IsAttacking($p, $k;)
    then
    	insertLogical(new IsChecking($p, $k));
        //System.out.println("Piece " + $p.getFEN() + " Is Checking King");
end

rule "Is Attacking A Higher Value Piece"
salience -99
    when
        $p1 : Piece($p1Value : value)
        $p2 : Piece(value > $p1Value)
        IsAttacking($p1, $p2;)
    then
        insertLogical(new CanCapture($p1, $p2, $p2.getPieceName() + " is a more valuable piece then " + $p1.getPieceName()));
end


rule "Is Attacking An Undefended piece"
salience -99
    when
        IsAttacking($p1, $p2;)
        not IsDefending($p3, $p2;)
    then
        insertLogical(new CanCapture($p1, $p2, $p2.getPieceName() + " is not defended"));
end


rule "Fork"
salience -99
  when
  		$p : Piece($boardNum : boardNum)
  		$list : List(size >= 2) from collect(IsAttacking($p,$p2;))
    then
        System.out.println("Piece color: " + $p.getFEN() + " Is Forking " + $list.size()  + " pieces in");
end


rule "Fork - canCapture and checking"
salience -99
  when
  		$p : Piece($boardNum : boardNum)
  		CanCapture($p,$p2;)
  		IsChecking($p, $k;)
    then
       System.out.println("Piece: " + $p + " Can Capture " + $p2  + " because it is also checking the king");
end