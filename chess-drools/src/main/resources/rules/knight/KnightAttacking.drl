//created on: Nov 27, 2022
package com.knight

//list any import classes here.

import com.sbnz.chessanalyzer.model.piece.Piece;
import com.sbnz.chessanalyzer.model.piece.Knight;
import com.sbnz.chessanalyzer.model.Square;
import com.sbnz.chessanalyzer.model.CanMoveOn;
import com.sbnz.chessanalyzer.model.IsOnPath;
import com.sbnz.chessanalyzer.model.Board;
import com.sbnz.chessanalyzer.model.CanMoveOn.CanMoveOnType;
import com.sbnz.chessanalyzer.model.IsAttacking;

//declare any global variables here




rule "Knight Attack UP RIGHT"

    when
        $s : Square($piece : piece, $squareText : squareText, $startRank : rank, $startFile : file, $boardNumS : boardNum) 
		$k : Knight(this.equals($piece), $color : color)
		$moveSquare : Square(rank == $startRank + 2, file == $startFile + 1,  $squareText2 : squareText, boardNum == $boardNumS, $piece2 : piece)
		$p : Piece(this.equals($piece2), color != $color) 
    then
    	//System.out.println(" Square: " + $squareText + " on boar: " + $boardNumS);
      	insertLogical(new IsAttacking($k,$p,$boardNumS));

end

rule "Knight Attack UP LEFT"

    when
        $s : Square($piece : piece, $squareText : squareText, $startRank : rank, $startFile : file, $boardNumS : boardNum) 
		$k : Knight(this.equals($piece), $color : color)
		$moveSquare : Square(rank == $startRank + 2, file == $startFile - 1,  $squareText2 : squareText, boardNum == $boardNumS, $piece2 : piece)
		$p : Piece(this.equals($piece2), color != $color) 
    then
        insertLogical(new IsAttacking($k,$p,$boardNumS));

end


rule "Knight Attack LEFT UP"

    when
        $s : Square($piece : piece, $squareText : squareText, $startRank : rank, $startFile : file, $boardNumS : boardNum) 
		$k : Knight(this.equals($piece), $color : color)
		$moveSquare : Square(rank == $startRank + 1, file == $startFile - 2,  $squareText2 : squareText, boardNum == $boardNumS,  $piece2 : piece)
		$p : Piece(this.equals($piece2), color != $color) 
    then
        insertLogical(new IsAttacking($k,$p,$boardNumS));

end

rule "Knight Attack LEFT DOWN"

    when
        $s : Square($piece : piece, $squareText : squareText, $startRank : rank, $startFile : file, $boardNumS : boardNum) 
		$k : Knight(this.equals($piece), $color : color)
		$moveSquare : Square(rank == $startRank - 1, file == $startFile - 2,  $squareText2 : squareText, boardNum == $boardNumS, $piece2 : piece)
		$p : Piece(this.equals($piece2), color != $color) 
    then
    	//System.out.println(" Square: " + $squareText + " on boar: " + $boardNumS);
        insertLogical(new IsAttacking($k,$p,$boardNumS));

end


rule "Knight Attack RIGHT UP"

    when
        $s : Square($piece : piece, $squareText : squareText, $startRank : rank, $startFile : file, $boardNumS : boardNum) 
		$k : Knight(this.equals($piece), $color : color)
		$moveSquare : Square(rank == $startRank + 1, file == $startFile + 2,  $squareText2 : squareText, boardNum == $boardNumS, $piece2 : piece)
		$p : Piece(this.equals($piece2), color != $color) 
    then
    	//System.out.println(" Square: " + $squareText + " on boar: " + $boardNumS);
        insertLogical(new IsAttacking($k,$p,$boardNumS));

end

rule "Knight Attack RIGHT DOWN"

    when
        $s : Square($piece : piece, $squareText : squareText, $startRank : rank, $startFile : file, $boardNumS : boardNum) 
		$k : Knight(this.equals($piece), $color : color)
		$moveSquare : Square(rank == $startRank - 1, file == $startFile + 2,  $squareText2 : squareText, boardNum == $boardNumS, $piece2 : piece)
		$p : Piece(this.equals($piece2), color != $color) 
    then
    	//System.out.println(" Square: " + $squareText + " on boar: " + $boardNumS);
        insertLogical(new IsAttacking($k,$p,$boardNumS));

end


rule "Knight Attack DOWN LEFT"

    when
        $s : Square($piece : piece, $squareText : squareText, $startRank : rank, $startFile : file, $boardNumS : boardNum) 
		$k : Knight(this.equals($piece), $color : color)
		$moveSquare : Square(rank == $startRank - 2, file == $startFile - 1,  $squareText2 : squareText, boardNum == $boardNumS, $piece2 : piece)
		$p : Piece(this.equals($piece2), color != $color) 
    then
    	//System.out.println(" Square: " + $squareText + " on boar: " + $boardNumS);
        insertLogical(new IsAttacking($k,$p,$boardNumS));

end

rule "Knight Attack DOWN RIGHT"

    when
        $s : Square($piece : piece, $squareText : squareText, $startRank : rank, $startFile : file, $boardNumS : boardNum) 
		$k : Knight(this.equals($piece), $color : color)
		$moveSquare : Square(rank == $startRank - 2, file == $startFile + 1,  $squareText2 : squareText, boardNum == $boardNumS, $piece2 : piece)
		$p : Piece(this.equals($piece2), color != $color) 
    then
    	//System.out.println(" Square: " + $squareText + " on boar: " + $boardNumS);
       insertLogical(new IsAttacking($k,$p,$boardNumS));

end


rule "Attackng Print"
salience -99
  when
  		$r : Knight($boardNum : boardNum)
  		IsAttacking($r,$p;)
  		$s : Square(piece == $p, $squareText : squareText)
  		$b : Board(boardNum == $boardNum, $fen : fen)
    then
        System.out.println("Knight color: " + $r.getColor() + " Is Attacking on square: " + $squareText + " in position " + $fen);

end


